# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CTDQ
                                 A QGIS plugin
 A suite of handy QGIS tools for Civil/Geo Engineers and Designers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-18
        copyright            : (C) 2025 by CeeThreeDee
        email                : info@ceethreedee.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'CeeThreeDee'
__date__ = '2025-08-18'
__copyright__ = '(C) 2025 by CeeThreeDee'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import QgsProcessingProvider
from processing.core.ProcessingConfig import ProcessingConfig, Setting
from PyQt5.QtGui import QIcon
from .support import ctdtool_info, ctdpaths
from .ctdq_ExportDataSourcesMap import ExportDataSourcesMap
from .ctdq_GenerateCatchments_MinArea import GenerateCatchmentsMinArea
from .ctdq_ExportProjectStylesAsXML import ExportProjectStylesAsXML



class CTDQProvider(QgsProcessingProvider):

    def __init__(self):
        """
        Default constructor.
        """
        QgsProcessingProvider.__init__(self)

    def unload(self):
        """
        Unloads the provider. Any tear-down steps required by the provider
        should be implemented here.
        """
        pass

    def loadAlgorithms(self):
        """
        Loads all algorithms belonging to this provider.
        """
        self.addAlgorithm(ExportDataSourcesMap())
        self.addAlgorithm(GenerateCatchmentsMinArea())
        self.addAlgorithm(ExportProjectStylesAsXML())
        # add additional algorithms here

    def id(self):
        return 'CeeThreeDee Qtools'

    def name(self):
        return self.tr('CeeThreeDee Qtools')

    def icon(self):
        return QIcon(f'{ctdpaths["img"]}/CTD_logo.png')

    def longName(self):
        return self.name()
